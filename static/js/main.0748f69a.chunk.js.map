{"version":3,"sources":["Components/Stock.js","App.js","reportWebVitals.js","index.js"],"names":["Stock","props","useState","stockXVals","setStockXVals","stockYVals","setStockYvals","useEffect","getStock","stockName","newStockXVals","newStockYVals","STOCK_CALL","fetch","then","response","json","data","element","push","getPrice","catch","err","Error","labels","datasets","label","fill","backgroundColor","borderColor","options","scales","yAxes","ticks","beginAtZero","App","search","setSearch","price","setPrice","className","onSubmit","type","value","onChange","e","target","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAGaA,EAAQ,SAACC,GAAW,IAAD,EACQC,mBAAS,IADjB,mBACrBC,EADqB,KACTC,EADS,OAEQF,mBAAS,IAFjB,mBAErBG,EAFqB,KAETC,EAFS,KAI5BC,qBAAU,WACNC,MACD,CAACP,EAAMQ,YAEV,IAAMD,EAAW,WACb,IAAIE,EAAgB,GAChBC,EAAgB,GAGdC,EAAU,uFAAmFX,EAAMQ,UAAzF,sCADE,oBAElBI,MAAMD,GACLE,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACH,IAAK,IAAIC,KAAWD,EAAK,uBACrBP,EAAcS,KAAKD,GACnBP,EAAcQ,KAAKF,EAAK,uBAAuBC,GAAS,YAE5Dd,EAAcM,GACdJ,EAAcK,MAEjBG,MAAK,WAEFb,EAAMmB,SAAST,EAAc,OAEhCU,OAAM,SAACC,GACJ,MAAM,IAAIC,MAAMD,OAIpBL,EAAO,CACPO,OAAQrB,EACRsB,SAAU,CACN,CACIC,MAAO,mBACPT,KAAMZ,EACNsB,MAAM,EACNC,gBAAiB,oBACjBC,YAAa,6BAgBzB,OACI,mCACC,cAAC,IAAD,CAAMZ,KAAMA,EAAMa,QAdP,CACZC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,YChBdC,MAnCf,WAAgB,IAAD,EACcjC,mBAAS,QADvB,mBACPkC,EADO,KACCC,EADD,OAEYnC,mBAAS,GAFrB,mBAEPoC,EAFO,KAEAC,EAFA,KAab,OANAhC,qBAAU,WACH+B,GACHC,EAAS,KAEX,CAACD,IAGD,sBAAKE,UAAU,MAAf,UACE,oBAAIA,UAAU,WAAd,+BACA,qBAAKA,UAAU,UAAf,SACE,sBAAMC,SAAUJ,EAAhB,SACE,qDAEE,uBAAOK,KAAK,OAAOC,MAAOP,EAAQQ,SAAU,SAACC,GAAD,OAAOR,EAAUQ,EAAEC,OAAOH,iBAI5E,qBAAIH,UAAU,QAAd,6BAAuCF,KACvC,qBAAKE,UAAU,eAAf,SACE,wBAAQO,QAtBM,WAClBV,EAAU,KAqBN,qBAEF,qBAAKG,UAAU,kBAAf,SACE,cAAC,EAAD,CAAO/B,UAAW2B,EAAQhB,SAAUmB,UCrB7BS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.0748f69a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Line } from 'react-chartjs-2';\n  \nexport const Stock = (props) => {\n    const [stockXVals, setStockXVals] = useState([]);\n    const [stockYVals, setStockYvals] = useState([]);\n\n    useEffect(()=>{\n        getStock();\n    }, [props.stockName]);\n\n    const getStock = () => {\n        let newStockXVals = [];\n        let newStockYVals = [];\n\n        const STOCK_KEY = \"VLKOHHJXUL8DAJS9\";\n        const STOCK_CALL = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${props.stockName}&outputsize=compact&apikey=${STOCK_KEY}`;\n        fetch(STOCK_CALL)\n        .then((response) => {\n            return response.json();\n        })\n        .then((data) => {\n            for (let element in data[\"Time Series (Daily)\"]) {\n                newStockXVals.push(element);\n                newStockYVals.push(data[\"Time Series (Daily)\"][element][\"1. open\"]);   \n            }\n            setStockXVals(newStockXVals);\n            setStockYvals(newStockYVals);\n        })\n        .then(() => {\n            //pass through function to grab the price\n            props.getPrice(newStockYVals[0]);\n        })\n        .catch((err) => {\n            throw new Error(err)\n          });\n    };\n    //boilerplate for chart\n    let data = {\n        labels: stockXVals,\n        datasets: [\n            {\n                label: 'Stock Price in $',\n                data: stockYVals,\n                fill: false,\n                backgroundColor: 'rgb(255, 99, 132)',\n                borderColor: 'rgba(255, 99, 132, 0.2)',\n            },\n        ],\n    };\n    const options = {\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          ],\n        },\n    };\n\n    return (\n        <>\n         <Line data={data} options={options} />\n        </>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport { Stock } from \"./Components/Stock\";\n\nfunction App() {\n  const[search, setSearch] = useState(\"NFLX\");\n  const[price, setPrice] = useState(0);\n  \n  const emptySearch = () => {\n    setSearch(\"\");\n  }\n  useEffect(() => {\n    if (!price) {\n      setPrice(0);\n    }\n  },[price]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"header-1\">Stock Market Site</h1>\n      <div className=\"input-1\">\n        <form onSubmit={setSearch}>\n          <label>\n            Stock to search:\n            <input type=\"text\" value={search} onChange={(e) => setSearch(e.target.value)}/>\n          </label>\n        </form> \n      </div>\n      <h3 className=\"price\">Price today is: {price}</h3>\n      <div className=\"empty-button\">\n        <button onClick={emptySearch}>Reset</button>\n      </div>\n      <div className=\"chart-placement\">\n        <Stock stockName={search} getPrice={setPrice}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}